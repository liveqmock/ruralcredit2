package com.creditease.rc.dao.impl;

import java.util.List;

import org.springframework.stereotype.Repository;

import com.creditease.rc.dao.IProtocolSuffixMappingDAO;
import com.creditease.rc.domain.ProtocolSuffixMapping;
import com.creditease.rc.framework.dao.impl.BaseDao;
import com.creditease.rc.framework.pager.Pagination;

@Repository
public class ProtocolSuffixMappingDAOImpl extends BaseDao implements IProtocolSuffixMappingDAO {

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table RL_PROTOCOL_SUFFIX_MAPPING
     *
     * @abatorgenerated
     */
    public ProtocolSuffixMappingDAOImpl() {
        super();
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table RL_PROTOCOL_SUFFIX_MAPPING
     *
     * @abatorgenerated
     */
    public void insert(ProtocolSuffixMapping record) {
        this.insert("RL_PROTOCOL_SUFFIX_MAPPING.abatorgenerated_insert", record);
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table RL_PROTOCOL_SUFFIX_MAPPING
     *
     * @abatorgenerated
     */
    public int updateByPrimaryKey(ProtocolSuffixMapping record) {
        int rows = this.update("RL_PROTOCOL_SUFFIX_MAPPING.abatorgenerated_updateByPrimaryKey", record);
        return rows;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table RL_PROTOCOL_SUFFIX_MAPPING
     *
     * @abatorgenerated
     */
    public int updateByPrimaryKeySelective(ProtocolSuffixMapping record) {
        int rows = this.update("RL_PROTOCOL_SUFFIX_MAPPING.abatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table RL_PROTOCOL_SUFFIX_MAPPING
     *
     * @abatorgenerated
     */
    public ProtocolSuffixMapping selectByPrimaryKey(Long suffixId) {
        ProtocolSuffixMapping key = new ProtocolSuffixMapping();
        key.setSuffixId(suffixId);
        ProtocolSuffixMapping record = (ProtocolSuffixMapping) this.queryUnique("RL_PROTOCOL_SUFFIX_MAPPING.abatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table RL_PROTOCOL_SUFFIX_MAPPING
     *
     * @abatorgenerated
     */
    public int deleteByPrimaryKey(Long suffixId) {
        ProtocolSuffixMapping key = new ProtocolSuffixMapping();
        key.setSuffixId(suffixId);
        int rows = this.delete("RL_PROTOCOL_SUFFIX_MAPPING.abatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }
    /**
     * 
     * @author 韩大年  
     * @Description:  分页查询
     * @param protocolSuffixMapping
     * @param pagination
     * @return 
     * @version v1.0 
     * 2013-3-18
     */
     public Pagination selectProtocolSuffixMappingByPagination(ProtocolSuffixMapping protocolSuffixMapping,Pagination pagination){
    	 return this.queryForPaginatedList("RL_PROTOCOL_SUFFIX_MAPPING.selectProtocolSuffixMappingByPagination", "RL_PROTOCOL_SUFFIX_MAPPING.selectCountByPagination",
    			 protocolSuffixMapping, pagination.getStartResult(), pagination.getPageSize());
     }
     
     /**
      * 
      * @author 韩大年  
      * @Description:  查询合同编号后缀list
      * @param protocolSuffixMapping
      * @return 
      * @version v1.0 
      * 2013-3-25
      */
     public List<ProtocolSuffixMapping> selectProtocolSuffixMappingListByCondition(ProtocolSuffixMapping protocolSuffixMapping ){
    	 return (List<ProtocolSuffixMapping>) this.queryList("RL_PROTOCOL_SUFFIX_MAPPING.selectProtocolSuffixMappingListSelective", protocolSuffixMapping);
     }
}